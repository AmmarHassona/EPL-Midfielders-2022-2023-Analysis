# -*- coding: utf-8 -*-
"""EPL Midfielders 2022-2023

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1EZ0vOVTpUjMMr8xZiI68NWoHHAUw0K7z
"""

pip install -U mplsoccer

from mplsoccer import Pitch, FontManager, Sbopen
from matplotlib import rcParams
import matplotlib.pyplot as plt
import pandas as pd

# sort csv by key passes
df = pd.read_csv('player_premier_league_passing.csv')
df_keypass = df.sort_values(by = 'KeyPas' , ascending = False).head(10)
df_keypass

# top players by key passes
plt.figure(figsize=(10, 5))
plt.bar(df_keypass['Player'] , df_keypass['KeyPas'])
plt.plot(df_keypass['Player'] , df_keypass['KeyPas'] , color = 'black')
plt.title('Top Players: Key Passes')
plt.xlabel('Player')
plt.ylabel('Passes')
plt.xticks(rotation = 50 , ha = 'right')
plt.grid(True)
plt.show()

# top players by expected assists
plt.figure(figsize = (10 , 5))
plt.scatter(df_keypass['Player'] , df_keypass['xA'] , color = 'black')
plt.plot(df_keypass['Player'] , df_keypass['xA'] , color = 'black')
plt.title('Top Players: xA')
plt.xlabel('Player')
plt.ylabel('Expected Assists')
plt.xticks(rotation = 50 , ha = 'right')
plt.grid(True)
plt.show()

# top players by assists
plt.figure(figsize = (10 , 5))
plt.scatter(df_keypass['Player'] , df_keypass['Assist'] , color = 'black')
plt.plot(df_keypass['Player'] , df_keypass['Assist'] , color = 'black')
plt.title('Top Players: Assists')
plt.xlabel('Player')
plt.ylabel('Assists')
plt.xticks(rotation = 50 , ha = 'right')
plt.grid(True)
plt.show()

# top players' expected assists vs assists
plt.scatter(df_keypass['Player'] , df_keypass['xA'] , color = 'red')
plt.scatter(df_keypass['Player'] , df_keypass['Assist'] , color = 'black')
plt.plot(df_keypass['Player'] , df_keypass['xA'] , color = 'red')
plt.plot(df_keypass['Player'] , df_keypass['Assist'] , color = 'black')
plt.title('Assist (Black) vs xA (Red)')
plt.xlabel('Player')
plt.ylabel('Assists')
plt.xticks(rotation = 50 , ha = 'right')
plt.grid(True)
plt.show()

df = pd.read_csv('player_premier_league_possession.csv')
top_players = ['Bruno Fernandes' , 'Kieran Trippier' , 'Kevin De Bruyne' ,
               'Pascal Groß' , 'Martin Ødegaard' , 'Bukayo Saka' ,
               'James Ward-Prowse' , 'Michael Olise' , 'Trent Alexander-Arnold' , 'James Maddison']
df_poss = df[df['Player'].isin(top_players)]
df_poss

# top players' 90s played
plt.scatter(df_poss['Player'] , df_poss['90s_played'] , color = 'black')
plt.plot(df_poss['Player'] , df_poss['90s_played'] , color = 'black')
plt.title('90s Played')
plt.xlabel('Player')
plt.ylabel('Top Players: 90s Played')
plt.xticks(rotation = 50 , ha = 'right')
plt.grid(True)
plt.show()

# assists per 90 and xA per 90
players = ['Kevin De Bruyne' , 'Bukayo Saka' , 'Michael Olise' , 'Trent Alexander-Arnold' , 'James Maddison']
p = df_keypass[df_keypass['Player'].isin(players)]
p = p.sort_values(by = 'Assist' , ascending = True)
p['Assists_per_90'] = p['Assist'] / p['90s_played']
p['xA_per_90'] = p['xA'] / p['90s_played']

plt.scatter(p['Player'] , p['Assists_per_90'] , color = 'black')
plt.scatter(p['Player'] , p['xA_per_90'] , color = 'red')
plt.plot(p['Player'] , p['Assists_per_90'] , color = 'black')
plt.plot(p['Player'] , p['xA_per_90'] , color = 'red')
plt.title('Top Players: Assists (Black) and xA (Red) per 90')
plt.xlabel('Player')
plt.ylabel('Assists')
plt.xticks(rotation = 50 , ha = 'right')
plt.grid(True)
plt.show()

# total player attacking passes / total team passes
passes = ['TotalAtt_Pass', 'TotalComp_Passes', 'Live_Passes', 'Dead_Passes', 'Switches_Pass', 'Cross_Passes']
players = ['Kevin De Bruyne', 'Bukayo Saka', 'Michael Olise', 'Trent Alexander-Arnold', 'James Maddison']
p = df_poss[df_poss['Player'].isin(players)]

p['Passes_Percentage'] = (p['TotalAtt_Pass'] / p['Total_Passes']) * 100
plt.figure(figsize=(10, 5))
plt.pie(p['Passes_Percentage'], labels=p['Player'], autopct='%1.1f%%')
plt.title('Total Attacking Passes / Total Passes')
plt.show()

teams = ['Manchester City' , 'Arsenal' , 'Crystal Palace' ,  'Liverpool' , 'Leicester City']
df_shot = pd.read_csv('shooting_premier_league_stats.csv')
df_pass = pd.read_csv('passing_premierleague_stats.csv')
df_shot = df_shot[df_shot['Squad'].isin(teams)]
df_pass = df_pass[df_pass['Squad'].isin(teams)]

df_pass

# total player completed passes / total team completed passes
players = ['Kevin De Bruyne' , 'Bukayo Saka' , 'Michael Olise' , 'Trent Alexander-Arnold' , 'James Maddison']
df_poss = df_poss[df_poss['Player'].isin(players)]
df_poss = df_poss.sort_values(by = 'Squad' , ascending = True)
team_cmp = df_pass['Cmp'].values
player_cmp = df_poss['TotalComp_Passes'].values
cmp_pct = (player_cmp / team_cmp) * 100

plt.figure(figsize = (10 , 5))
plt.pie(cmp_pct , labels = df_poss['Player'] , autopct='%1.1f%%')
plt.title('Total Player Completed Passes / Total Team Completed Passes')
plt.show()

# total player assists / total team assists
players = ['Kevin De Bruyne' , 'Bukayo Saka' , 'Michael Olise' , 'Trent Alexander-Arnold' , 'James Maddison']
df_poss = df_poss[df_poss['Player'].isin(players)]
df_player = df_keypass[df_keypass['Player'].isin(players)]
df_poss = df_poss.sort_values(by = 'Squad' , ascending = True)
team_assists = df_pass['Ast'].values
player_assist = df_player['Assist'].values
assist = (player_assist / team_assists) * 100

plt.figure(figsize = (10 , 5))
plt.pie(assist , labels = df_poss['Player'] , autopct='%1.1f%%')
plt.title('Total Player Assists / Total Team Assists')
plt.show()

# total player shots / total team shots
df_player_shot = pd.read_csv('player_premier_league_shooting.csv')
player_shot = df_player_shot[df_player_shot['Player'].isin(players)]

total_player_shot = player_shot['Tot_Shot'].values
total_team_shot = df_shot['Sh'].values
shots = (total_player_shot / total_team_shot) * 100

plt.figure(figsize = (10 , 5))
plt.pie(shots , labels = player_shot['Player'] , autopct='%1.1f%%')
plt.title('Total Player Shots / Total Team Shots')
plt.show()

# player assists / total team goals
total_team_goals = df_shot['Gls'].values
goal_impact = (player_assist / total_team_goals) * 100
player = df_player_shot[df_player_shot['Player'].isin(players)]

plt.figure(figsize = (10 , 5))
plt.pie(goal_impact , labels = player['Player'] , autopct='%1.1f%%')
plt.title('Player Assists / Team Goals')
plt.show()